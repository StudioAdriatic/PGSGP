name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Create mock godot-lib for tests
        run: |
          mkdir -p godot-lib
          echo "configurations.maybeCreate(\"default\")" > godot-lib/build.gradle
          echo "artifacts.add(\"default\", file('godot-lib.mock.aar'))" >> godot-lib/build.gradle
          touch godot-lib/godot-lib.mock.aar

      - name: Run unit tests
        run: ./gradlew test

      - name: Upload test results
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: test-results
          path: app/build/reports/tests/

  build:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        godot_version: ['4.4.1', '4.3', '4.2.2', '4.1.4', '4.0.4', '3.6.1']
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Update godot-lib build.gradle
        run: |
          filename="godot-lib.${{ matrix.godot_version }}.stable.template_release.aar"
          echo "configurations.maybeCreate(\"default\")" > godot-lib/build.gradle
          echo "artifacts.add(\"default\", file('$filename'))" >> godot-lib/build.gradle

      - name: Download godot-lib
        run: |
          filename="godot-lib.${{ matrix.godot_version }}.stable.template_release.aar"
          url="https://github.com/godotengine/godot/releases/download/${{ matrix.godot_version }}-stable/${filename}"
          curl -L -o "godot-lib/${filename}" "$url"

      - name: Build with Gradle
        run: ./gradlew build

      - name: Rename AAR
        run: |
          mv app/build/outputs/aar/GodotPlayGamesServices.release.aar GodotPlayGamesServices-godot-${{ matrix.godot_version }}.aar

      - name: Upload AAR as artifact
        uses: actions/upload-artifact@v2
        with:
          name: gpgs-godot-${{ matrix.godot_version }}
          path: GodotPlayGamesServices-godot-${{ matrix.godot_version }}.aar

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Download all AARs
        uses: actions/download-artifact@v2
        with:
          path: aars

      - name: Upload AARs to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: aars/*/*.aar
          asset_name: ${{ env.ASSET_NAME }}
          asset_content_type: application/java-archive
